from fastapi import APIRouter, Request, Form, Depends
from fastapi.responses import RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlmodel import select, Session
from app.db import get_session
from app.models import User
from app.i18n import get_lang, get_L

router = APIRouter()
templates = Jinja2Templates(directory="app/templates")

@router.get("/login")
def login_page(request: Request, next: str | None = None):
    L = get_L(get_lang(request))
    return templates.TemplateResponse("login.html", {"request": request, "L": L, "next": next, "error": None})

@router.post("/login")
def login_action(
    request: Request,
    login_id: str = Form(...),
    password: str = Form(...),
    next: str | None = Form(None),
    session: Session = Depends(get_session),
):
    L = get_L(get_lang(request))
    user = session.exec(select(User).where(User.login_id == login_id, User.password == password)).first()
    if not user:
        return templates.TemplateResponse("login.html", {"request": request, "L": L, "error": L["error_login_bad"], "next": next})
    resp = RedirectResponse(url=next or "/", status_code=303)
    resp.set_cookie("username", user.username or user.login_id, max_age=60*60*24*365, httponly=False, samesite="lax", path="/")
    return resp

@router.get("/register")
def register_page(request: Request):
    L = get_L(get_lang(request))
    return templates.TemplateResponse("register.html", {"request": request, "L": L, "error": None})

@router.post("/register")
def register_action(
    request: Request,
    login_id: str = Form(...),
    password: str = Form(...),
    username: str = Form(...),
    email: str = Form(...),
    email_confirm: str = Form(...),
    session: Session = Depends(get_session),
):
    L = get_L(get_lang(request))
    if email != email_confirm:
        return templates.TemplateResponse("register.html", {"request": request, "L": L, "error": L["error_email_mismatch"]})
    exists = session.exec(select(User).where((User.login_id == login_id) | (User.email == email))).first()
    if exists:
        return templates.TemplateResponse("register.html", {"request": request, "L": L, "error": L["error_id_or_email_used"]})
    user = User(login_id=login_id, password=password, username=username, email=email)
    session.add(user); session.commit(); session.refresh(user)
    resp = RedirectResponse(url="/", status_code=303)
    resp.set_cookie("username", user.username or user.login_id, max_age=60*60*24*365, httponly=False, samesite="lax", path="/")
    return resp

@router.get("/logout")
def logout(request: Request):
    resp = RedirectResponse(url="/login", status_code=303)
    resp.delete_cookie("username", path="/")
    return resp
